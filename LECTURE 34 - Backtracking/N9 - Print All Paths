package backtracking;

public class RatInAMaze {
	
	
	private static void printAllPaths(int maze[][], int i, int j, int path[][]){
		int n = maze.length;
		if(i<0 || i>n-1 || j<0 || j>n-1 || maze[i][j]==0 || path[i][j]==1){
			return;
		}
		// Mark this cell as 1
		path[i][j] = 1;
		// Base Case
		if(i == n-1 && j == n-1){
			for(int r=0; r<n; r++) {
				for(int c=0; c<n; c++) {
					System.out.print(path[r][c] + " ");
				}
				System.out.println();
			}
			System.out.println();
			path[i][j] = 0;
			return;
		}
		// Top
		printAllPaths(maze, i-1, j, path);
		
		// Right
		printAllPaths(maze, i, j+1, path);
		
		// Bottom
		printAllPaths(maze, i+1, j, path);
		
		// Left
		printAllPaths(maze, i, j-1, path);
		
		path[i][j] = 0;
	}
	
	
	private static boolean solveMaze(int maze[][], int i, int j, int path[][]){
		int n = maze.length;
		if(i<0 || i>n-1 || j<0 || j>n-1 || maze[i][j]==0 || path[i][j]==1){
			return false;
		}
		// Mark this cell as 1
		path[i][j] = 1;
		// Base Case
		if(i == n-1 && j == n-1){
			for(int r=0; r<n; r++) {
				for(int c=0; c<n; c++) {
					System.out.print(path[r][c] + " ");
				}
				System.out.println();
			}
			return true;
		}
		// Top
		if(solveMaze(maze, i-1, j, path)){
			return true;
		}
		// Right
		if(solveMaze(maze, i, j+1, path)){
			return true;
		}
		// Bottom
		if(solveMaze(maze, i+1, j, path)){
			return true;
		}
		// Left
		if(solveMaze(maze, i, j-1, path)){
			return true;
		}

		return false;
	}
	
	public static boolean ratInAMaze(int maze[][]){

		int n = maze.length;
		int path[][] = new int [n][n];
		return solveMaze(maze, 0, 0, path);

	}
	
	public static void printAllPaths(int maze[][]) {
		int n = maze.length;
		int path[][] = new int [n][n];
		printAllPaths(maze, 0, 0, path);
	}
	
	public static void main(String[] args) {
		int maze[][] = {{1,1,1},{1,1,0},{1,1,1}};
		printAllPaths(maze);
	}
}
