package binaryTrees;

public class BinaryTreeNode<T> {
	public T data;
	public BinaryTreeNode<T> left;
	public BinaryTreeNode<T> right;
	
	public BinaryTreeNode(T data) {
		this.data = data;
	}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package binaryTrees;

import java.util.*;
public class BinaryTreeUse {
	
	public static ArrayList<Integer> RootToNodePath(BinaryTreeNode<Integer> root, int x){
		if(root == null) {
			return null;
		}
		
		if(root.data == x) {
			ArrayList<Integer> output = new ArrayList<Integer>();
			output.add(x);
			return output;
		}
		
		ArrayList<Integer> leftOutput = RootToNodePath(root.left, x);
		if(leftOutput != null) {
			leftOutput.add(root.data);
			return leftOutput;
		}
		
		ArrayList<Integer> rightOutput = RootToNodePath(root.right, x);
		if(rightOutput != null) {
			rightOutput.add(root.data);
			return rightOutput;
		}
		
		return null;
	}
	
	public static BinaryTreeNode<Integer> takeTreeInput(){
		System.out.println("Enter root : ");
		Scanner sc = new Scanner(System.in);
		int rootData = sc.nextInt();
		
		if(rootData == -1) {
			return null;
		}
		
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		BinaryTreeNode<Integer> leftChild = takeTreeInput();
		BinaryTreeNode<Integer> rightChild = takeTreeInput();
		root.left = leftChild;
		root.right = rightChild;
		
		return root;
	}
	
	public static void printTreeDetailed(BinaryTreeNode<Integer> root) {
		if(root == null) {
			return;
		}
		System.out.print(root.data + ":");
		if(root.left != null) {
			System.out.print(" - L" + root.left.data);
		}
		if(root.right != null) {
			System.out.print(" - R" + root.right.data);
		}
		System.out.println();
		printTreeDetailed(root.left);
		printTreeDetailed(root.right);
	}

	public static void main(String[] args) {
  
		BinaryTreeNode<Integer> root = takeTreeInput();
		printTreeDetailed(root);
		ArrayList<Integer> path = RootToNodePath(root, 6);
		for(int i : path) {
			System.out.print(i + " ");
      }
   }

}
